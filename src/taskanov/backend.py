from __future__ import annotations
from dataclasses import dataclass
from typing import List, Protocol, Optional
from .provider import Task

class Backend(Protocol):
    def on_tasks_refresh(self, open_tasks: List[Task], done_tasks: List[Task]) -> None: ...
    def on_task_toggled(self, task: Task) -> None: ...
    def on_task_deleted(self, task: Task) -> None: ...
    def on_timer_start(self, title: str, started_ts: float) -> None: ...
    def on_timer_stop(self, title: str, started_ts: float, ended_ts: float) -> None: ...

class NullBackend:
    def on_tasks_refresh(self, open_tasks: List[Task], done_tasks: List[Task]) -> None: ...
    def on_task_toggled(self, task: Task) -> None: ...
    def on_task_deleted(self, task: Task) -> None: ...
    def on_timer_start(self, title: str, started_ts: float) -> None: ...
    def on_timer_stop(self, title: str, started_ts: float, ended_ts: float) -> None: ...
