from __future__ import annotations
from dataclasses import dataclass
from typing import List, Optional, Protocol

@dataclass
class Task:
    id: str
    title: str
    done: bool = False
    list_title: Optional[str] = None

# Unified backend interface (CRUD + timer state)
class Backend(Protocol):
    # Tasks
    def refresh(self) -> None: ...
    def list_open(self) -> List[Task]: ...
    def list_done(self) -> List[Task]: ...
    def toggle(self, task_id: str) -> Optional[Task]: ...
    def delete(self, task_id: str) -> Optional[Task]: ...
    def ensure(self, title: str) -> Task: ...

    # Timer state (backend-owned)
    # Returns (active, title, started_ts)
    def get_active_timer(self) -> tuple[bool, str, float]: ...
    def start_timer(self, title: str, started_ts: float) -> None: ...
    def stop_timer(self, ended_ts: float) -> None: ...
